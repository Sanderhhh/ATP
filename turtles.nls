__includes["season.nls"]

turtles-own [
  age             ;; Keeps track of age in years
  thirst          ;; Keeps track of how moisturized a turtle is
  hunger
  sex             ;; Biological sex for eventual reproduction
  search-range     ;; Radius within turtle checks for food
  sight-range
  likes
  individualism
  pref-security
  migrate
]


to init-turtle
  ;; if initializing, create population with randomly distrubuted age
  if ticks = 0 [
    set age random 70
  ]
  ;; if not initializing, age is set to 0, because turtle is a baby
  if ticks != 0 [
    set age 0
  ]
  set likes one-of [red blue yellow green]
  set color likes
  if likes = red [set individualism 18]
  if likes = blue [set individualism 10]
  if likes = yellow [set individualism 5]
  if likes = green [set individualism 13]
  
  set pref-security 20
  set sight-range 50
  set search-range 5
  set thirst 0
  set hunger 0
  set sex random 1
end

to find-food
  ;; turtle finds a patch with food in its sight range, then faces it
  let food-options (patches in-radius search-range with [vegetation > 0.1])
  ;;let food-patch one-of food-options
    
  ;; only face it if food is found
  let food-count count food-options
  
  ifelse food-count < pref-security [
    let food-patch one-of (patches in-radius sight-range with [vegetation > 0.1])
    if is-patch? food-patch
    [
      set migrate food-patch
      face food-patch
    ]
  ][
    if (not similar or hunger > 0.5)
    [face one-of food-options]
  ]
  
  ;;if-else is-patch? food-patch ;;and hunger > 0.01

  
  ;; Could make it face towards similar if it is not too hungry
  
end

to wiggle
  left random 90 ;;90
  right random 90 ;;90
end

to-report similar
  
  ;; Maybe move to epicenter if too far away from it based on
  ;; individualism
  
  let averageX 0
  let averageY 0
  
  let thisColor likes
  
  ;; Could increase this radius based on individualism
  ;; Could track this, and always move to the group if there are
  ;; no group agents nearby anymore
  
  let turtleSet turtles in-radius 20 with [likes = thisColor]
  
  let turtleCount count turtleSet
  
  if turtleCount > 0
  [
    ask turtleSet[
      set averageX averageX + xcor
      set averageY averageY + ycor
    ]
  
  
    set averageX averageX / turtleCount
    set averageY averageY / turtleCount
    
    let corx int averageX
    let cory int averageY
  
    if distance (patch corx cory) > individualism [
      facexy averageX averageY
      report True
    ]
  ]
  report False
;  set heading (patch-at averageX averageY)
  
  ; head slightly similar to turtle with similar like
end

to find-new-spot
  ;; find patch with food, then wiggle towards it
  
  wiggle
  find-food
  ;;procreate
  
  forward 1
end

to update-turtles
  check-if-im-dead
  ;; update age as follows, such that every tick represents a year
  if ticks mod 120 = 0 [
    set age (age + 1)
  ]
  ;; water more important than food
  set hunger (hunger + 0.025)
  set thirst (thirst + 0.03)
  
  eat-and-drink
  
  find-new-spot
end

to eat-and-drink
  if vegetation > 0.1 [
    set vegetation vegetation - 0.1
    set hunger hunger - 0.2
    if hunger < 0 [set hunger 0]
  ]
end

to procreate
  ;; if neither turtle is hungry, they totally bang epic-style
  let mate one-of (turtles in-radius sight-range)
  with [hunger < 0.1]
  
  if hunger < 0.1 [
    set hunger (hunger + 0.5)
    ask mate [
      set hunger (hunger + 0.5)
    ]
    ;; sprout baby instantly, pregnancy has not been implemented yet
    ask one-of patches in-radius 1 [
      sprout 1 [init-turtle]
    ]
  ]
end

to check-if-im-dead
  if age > 80 or hunger > 1.5 [ die ]
end